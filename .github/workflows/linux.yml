name: Linux

on:
  push:
    branches:
      - master
      - 'Stable*'
    tags:
      - 'v*'
  workflow_dispatch:
  pull_request:
    paths:
      - '.github/workflows/linux.yml'
      - 'deploy/linux/**'
      - 'src/**'
      - 'CMakeLists.txt'

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build:
    runs-on: ${{ matrix.runs-on }}

    strategy:
      matrix:
        BuildType: [Release]
        runs-on: [ubuntu-22.04-arm]
        include:
          - runs-on: ubuntu-22.04-arm
            ARTIFACT: QGroundControl-aarch64.AppImage
            PACKAGE: QGroundControl-aarch64
            host: linux_arm64
            arch: linux_gcc_arm64

    defaults:
      run:
        shell: bash

    env:
      QT_VERSION: 6.8.1
      GST_VERSION: 1.22.12
      CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true

      - name: Initial Setup
        uses: ./.github/actions/common

      - name: Install Dependencies
        run: |
          chmod a+x ./tools/setup/install-dependencies-debian.sh
          sudo ./tools/setup/install-dependencies-debian.sh

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.25.x'
          
      - name: Install Vulkan
        run: |
          sudo apt install -y --quiet libvulkan-dev
          if apt-cache show vulkan-validationlayers-dev >/dev/null 2>&1 && apt-cache show vulkan-validationlayers-dev 2>/dev/null | grep -q "^Package: vulkan-validationlayers-dev"; then
            sudo apt-get install -y --quiet vulkan-validationlayers-dev
          fi
          if apt-cache show vulkan-utility-libraries-dev >/dev/null 2>&1 && apt-cache show vulkan-utility-libraries-dev 2>/dev/null | grep -q "^Package: apt-cache show vulkan-utility-libraries-dev"; then
            sudo apt-get install -y --quiet vulkan-utility-libraries-dev
          fi

      - name: Setup Caching
        if: ${{ matrix.arch=='linux_gcc_64' }}
        uses: ./.github/actions/cache
        with:
          host: ${{ matrix.host }}
          target: desktop
          build-type: ${{ matrix.BuildType }}
          cpm-modules: ${{ env.CPM_SOURCE_CACHE }}

      - name: Install Qt for Linux
        uses: jdpurcell/install-qt-action@b45c67aaa9e0ea77e59a7031ec14a12d5ddf4b35
        with:
          version: ${{ env.QT_VERSION }}
          host: ${{ matrix.host }}
          target: desktop
          arch: ${{ matrix.arch }}
          dir: ${{ runner.temp }}
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors

      # - name: Build GStreamer
      #   uses: ./.github/actions/gstreamer

      - name: Configure
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run: ${{ env.QT_ROOT_DIR }}/bin/qt-cmake -S ${{ github.workspace }} -B . -G Ninja
              -DCMAKE_BUILD_TYPE=${{ matrix.BuildType }}
              -DQGC_BUILD_TESTING=${{ matrix.BuildType == 'Debug' && 'ON' || 'OFF' }}
              -DQGC_STABLE_BUILD=${{ github.ref_type == 'tag' || contains(github.ref, 'Stable') && 'ON' || 'OFF' }}

      - name: Build
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run: cmake --build . --target all --config ${{ matrix.BuildType }}

      - name: Create AppImage
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run: cmake --install . --config ${{ matrix.BuildType }}

      - name: Sanity check release excecutable
        if: matrix.BuildType == 'Release'
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run: xvfb-run -a ./${{ matrix.ARTIFACT }} --simple-boot-test

      - name: Run unit tests
        if: matrix.BuildType == 'Debug'
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run: xvfb-run -a ./${{ matrix.ARTIFACT }} --unittest

      - name: Upload Build File
        if: matrix.BuildType == 'Release'
        uses: ./.github/actions/upload
        with:
          artifact_name: ${{ matrix.ARTIFACT }}
          package_name: ${{ matrix.PACKAGE }}
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
